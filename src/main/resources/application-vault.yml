camunda:
  bpm:
    generic-properties:
      properties:
        historyCleanupBatchWindowStartTime: "00:00"
        historyCleanupBatchWindowEndTime: "23:59"
        historyCleanupStrategy: removalTimeBased
        historyCleanupDegreeOfParallelism: 4
        historyTimeToLive: P0D
        batchOperationHistoryTimeToLive: P0D
    default-number-of-retries: 0
    admin-user:
      id: ${CAMUNDA_ID:demo}
      password: ${CAMUNDA_PASSWORD:demo}
      firstName: ${CAMUNDA_FIRST_NAME:Demo}
      lastName: ${CAMUNDA_LAST_NAME:Demo}
    database:
      type: ${CAMUNDA_DATABASE_TYPE:oracle}
      schema-update: ${CAMUNDA_SCHEMA_UPDATE:true}
    job-execution:
      enabled: true
    deployment-resource-pattern: classpath*:bpmn/**/*.bpmn
    auto-deployment-enabled: true
    authorization:
      enabled: true
    application:
      delete-upon-undeploy: false
      scan-for-process-definitions: false
      deploy-changed-only: true
      resume-previous-versions: true
      resume-previous-by: a value

app:
  upload:
    dir: ${UPLOAD_DIR:/}
  files:
    readTime: ${FILES_SCHEDULER_RETENTION:100}

minio:
  endpoint: ${MINIO_ENDPOINT:https://s3.cognive.com/}
  port: ${MINIO_PORT:443}
  accessKey: ${MINIO_ACCESS_KEY:rnkb-so}
  secretKey: ${MINIO_SECRET_KEY:952c4678-7867-4fec-b407-e0ba0c02c150}
  secure: ${MINIO_SECURE:true}
  bucket-name: ${MINIO_BUCKET_NAME:rnkb-so}
  file-size: ${MINIO_FILE_SIZE:1073741824} #  Here is the maximum file size
  errorCaseFolder: ${MINIO_ERR0R_CASE_FOLDER:errortmp}
  successCaseFolder: ${MINIO_SUCCESS_CASE_FOLDER:successtmp}
  caseFolder: ${MINIO_CASE_FOLDER:tmp}
  fileName: ${MINIO_FILE_NAME:result.json}
  reestFolder: ${MINIO_REEST_FOLDER:reest}

spring:
  liquibase:
    enabled: false
  profiles:
    active: ${SPRING_ACTIVE_PROFILES:default}
  jpa:
    show-sql: ${DATABASE_SHOWSQL:true}
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      ddl-auto: none
    generate-ddl: false
    database-platform: ${DATABASE_PLATFORM:org.hibernate.dialect.Oracle12cDialect}
  datasource:
    hikari:
      jdbc-url: ${DATABASE_URL:jdbc:oracle:thin:@176.9.124.111:1521:orcl}
      username: ${DATABASE_USERNAME:OSADMIN}
      password: ${DATABASE_PASSWORD:Qawsed123}
      driver-class-name: ${DATABASE_DRIVER:oracle.jdbc.OracleDriver}
      schema: ${DB_SCHEMA:DEV_USER_RNKB}
      connection-test-query: ${TEST_QUERY:select 1 from dual}

  application:
    name: ${SPRING_APPLICATION_NAME:casernkb}
  cloud:
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BROKERS}
          configuration:
            max.request.size: 104857600
            max.poll.records: 1
            max.poll.interval.ms: 600000
            security.protocol: ${KAFKA_SECURITY_PROTOCOL}
            ssl.truststore.location: ${KAFKA_SSL_TRUSTSTORE_LOCATION}
            ssl.truststore.password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
            ssl.keystore.type: ${KAFKA_SSL_KEYSTORE_TYPE}
            ssl.keystore.location: ${KAFKA_SSL_KEYSTORE_LOCATION}
            ssl.keystore.password: ${KAFKA_SSL_KEYSTORE_PASSWORD}
            ssl.key.password: ${KAFKA_SSL_KEY_PASSWORD}
            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            key.serializer: org.apache.kafka.common.serialization.StringSerializer
      bindings:
        commonMessageInput-in-0:
          destination: ${TOPIC_MESSAGE_INPUT}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        pipelineMessageInput-in-0:
          destination: ${TOPIC_PIPELINE_INPUT}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        saveRiskResponseMessageInput-in-0:
          destination: ${TOPIC_RISK_RESPONSE_SAVE_INPUT:risk-scoring-resp}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        kycCaseCreationInput-in-0:
          destination: ${TOPIC_KYC_CASE_CREATION:kyc_casecreation}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        rjCreationInput-in-0:
          destination: ${TOPIC_RJ_CREATION:aml_camunda_rj_request}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        zkAmlRequestInput-in-0:
          destination: ${TOPIC_ZK_REQUEST:transport-req-requestClient}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        zkAmlResponseInput-in-0:
          destination: ${TOPIC_ZK_RESPONSE_IN:transport-req-responseClient}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        zkAmlStatusInput-in-0:
          destination: ${TOPIC_ZK_STATUS:transport-req-statusClient}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        biMessageInput-in-0:
          destination: ${TOPIC_BENEFICIARY_IDENTIFIED:beneficiary-camunda-in}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        outMessage-out-0:
          destination: ${TOPIC_MESSAGE_OUT}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
        outMessageCase-out-0:
          destination: ${TOPIC_MESSAGE_CASE_RESPONSE}
          group: ${KAFKA_GROUP:case-rnkb}
          binder: kafka
      function:
        definition: commonMessageInput;pipelineMessageInput;saveRiskResponseMessageInput;kycCaseCreationInput;zkAmlRequestInput;zkAmlResponseInput;zkAmlStatusInput;rjCreationInput;biMessageInput
    config:
      # noinspection SpringBootApplicationYaml
      import: ${VAULT_IMPORT:vault:///rnkb/case}
    cloud:
      vault:
        host: ${VAULT_HOST:localhost}
        port: ${VAULT_PORT:8200}
        scheme: ${VAULT_SCHEME:http}
        uri: ${VAULT_URI:http://localhost:8200}
        connection-timeout: 5000
        read-timeout: 15000
        authentication: TOKEN
        token: ${VAULT_TOKEN:hvs.6j2FrTdxxeCzbxsRIpuTitim}
        enabled: ${VAULT_ENABLED:true}

server:
  port: ${SERVER_PORT:8193}
  message-mapping:
    message-case: ${TOPIC_MESSAGE_OUT}
    message-pipeline: ${TOPIC_MESSAGE_OUT}
    message-case-out: ${TOPIC_MESSAGE_OUT}
    message-case-response: ${TOPIC_MESSAGE_CASE_RESPONSE}

  kafka:
    camunda:
      header-name: ${PROCESS_NAME_HEADER:aml_camunda_start}
    csm:
      header-name: ${CSM_PROCESS_NAME_HEADER:processName}
      process-name: ${CSM_PROCESS_NAME:amlCsmRequest}
    pipeline:
      process-name: ${PIPELINE_PROCESS_NAME:amlPaymentCasePostBatch}
      mapping:
        pipeline-payment-response: ${PIPELINE_PAYMENT_RESPONSE_ID:2b605119-16db-47d9-a087-cd1ad87731f3}
    kyc:
      process-name: ${KYC_PROCESS_NAME:amlKycClientProcess}
    kycOperation:
      process-name: ${KYC_OPERATION_PROCESS_NAME:amlKycOperationProcess}
    rj:
      process-name: amlAutoReasonedJudgment
    bi:
      process-name: ${BI_PROCESS_NAME:amlPaymentCaseBeneficiaryIdentification}
    case-send-decision:
      process-name: ${CASE_SEND_DECISION_PROCESS_NAME:amlCaseSendDecision}
      response-topic-mapping:
        paymentRespTopic: ${CASE_SEND_DECISION_PAYMENT_TOPIC:payment-resp}
        clientRespTopic: ${CASE_SEND_DECISION_CLIENT_TOPIC:client-resp}
    error-topic: ${TOPIC_ERROR_OUT:}
    zk-aml-request-output-topic: ${TOPIC_ZK_REQUEST_OUT:requestClient-resp}
    zk-aml-response-output-topic: ${TOPIC_ZK_RESPONSE_OUT:responseClient-resp}
zk:
  legal-doc-pattern: ${LEGAL_DOC_PATTERN:PatternLegal.docx}
  legal-doc-pattern-table: ${LEGAL_DOC_PATTERN_TABLE:PatternLegalTable.docx}
  individual-doc-pattern: ${INDIVIDUAL_DOC_PATTERN:PatternIndividual.docx}
  individual-doc-pattern-table: ${INDIVIDUAL_DOC_PATTERN_TABLE:PatternIndividualTable.docx}
logging:
  level:
    org.springframework: ERROR
    org:
      hibernate:
        type: info
      camunda:
        bpm: info
    com:
      cognive:
        projects:
          casernkb: INFO
          kafkaReader: INFO
  pattern:
    file: "%d %p %c{1.} [%t] %m%n"
  file:
    name: ${LOG_PATH:app.log}
  logback:
    rollingpolicy:
      clean-history-on-start: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
