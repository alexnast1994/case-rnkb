<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:modeler="http://camunda.org/schema/modeler/1.0" id="Definitions_1bijmc2" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.2.0" modeler:executionPlatform="Camunda Platform" modeler:executionPlatformVersion="7.17.0">
  <bpmn:process id="amlKycOperationProcess" name="amlKycOperationProcess" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>Flow_1eta143</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:serviceTask id="Activity_13r4h67" name="Логирование процесса" camunda:delegateExpression="${loggerDelegate}">
      <bpmn:incoming>Flow_1eta143</bpmn:incoming>
      <bpmn:outgoing>Flow_0aojsjg</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:scriptTask id="Activity_1et1nm9" name="Get Payload" scriptFormat="groovy">
      <bpmn:incoming>Flow_0aojsjg</bpmn:incoming>
      <bpmn:outgoing>Flow_1mtxpn0</bpmn:outgoing>
      <bpmn:script>import static org.camunda.spin.Spin.JSON

def jsonStr = execution.getVariable("payload") as String
def jsonData = JSON(jsonStr).prop("payload").prop("amlCsmKycPaymentRequest")
execution.setVariable("jsonData", jsonData)</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_1eta143" sourceRef="StartEvent_1" targetRef="Activity_13r4h67" />
    <bpmn:sequenceFlow id="Flow_0aojsjg" sourceRef="Activity_13r4h67" targetRef="Activity_1et1nm9" />
    <bpmn:subProcess id="Activity_046avyt">
      <bpmn:incoming>Flow_1xwqo21</bpmn:incoming>
      <bpmn:outgoing>Flow_14cpvbj</bpmn:outgoing>
      <bpmn:startEvent id="Event_1q8k7ji">
        <bpmn:outgoing>Flow_1ve5udi</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:sequenceFlow id="Flow_1ve5udi" sourceRef="Event_1q8k7ji" targetRef="Activity_03oe1vx" />
      <bpmn:scriptTask id="Activity_03oe1vx" name="PAYMENTPARTICIPANTLIST" scriptFormat="groovy">
        <bpmn:incoming>Flow_1ve5udi</bpmn:incoming>
        <bpmn:outgoing>Flow_09heimr</bpmn:outgoing>
        <bpmn:script>import com.prime.db.rnkb.model.BaseDictionary
import com.prime.db.rnkb.model.Client
import com.prime.db.rnkb.model.Payment
import com.prime.db.rnkb.model.PaymentParticipantList
import org.camunda.spin.json.SpinJsonNode

def json = execution.getVariable("jsonData") as SpinJsonNode


Payment getPayment(String exId) {
    paymentRepo.getPaymentByExid(exId)
}

Client getClient(String exClientId) {
    clientRepo.findClientByExid(exClientId)
}

BaseDictionary getBd(int type, String code) {
    baseDictRepo.getByBaseDictionaryTypeCodeAndCode(type, code);
}


def paymentEvent = json.prop("RequestData").prop("PaymentEvents").elements()[0]

if (paymentEvent.hasProp("Participants") &amp;&amp; paymentEvent.prop("Participants") != null &amp;&amp; paymentEvent.prop("Participants").elements().size() &gt; 0) {

    List&lt;PaymentParticipantList&gt; participantListList = new ArrayList&lt;&gt;()

    paymentEvent.prop("Participants").elements().each {it -&gt;

        PaymentParticipantList participantList = new PaymentParticipantList()

        participantList.paymentId = getPayment(json.prop("ResponseData").prop("PaymentCheckResult").elements()[0].prop("SourceId").stringValue())
        if (it.hasProp("ClientId") &amp;&amp; it.prop("ClientId") != null &amp;&amp; it.prop("ClientId").stringValue() != "") {
            participantList.clientId = getClient(it.prop("ClientId").stringValue())
        }
        participantList.otherPersonType = it.hasProp("PartType") &amp;&amp; it.prop("PartType") != null ? getBd(169, it.prop("PartType").toString()) : null

        StringBuilder markerString = new StringBuilder()
        if (it.hasProp("Results") &amp;&amp; it.prop("Results") != null &amp;&amp; it.prop("Results").elements().size() &gt; 0) {
            def result = it.prop("Results").elements()
            def fields = result[0].fieldNames().findAll { it =~ /^[D,M][0-9]*$/ }
            participantList.exId = result[0].hasProp("record") &amp;&amp; result[0].prop("record").hasProp("exId") ? result[0].prop("record").prop("exId").stringValue() : null
            participantList.num = result[0].hasProp("record") &amp;&amp; result[0].prop("record").hasProp("num") ? result[0].prop("record").prop("num").stringValue() : null
            fields.each { it1 -&gt;
                if ((result[0].prop(it1).isBoolean() &amp;&amp; result[0].prop(it1).boolValue() != false)
                        || (result[0].prop(it1).isString() &amp;&amp; result[0].prop(it1).stringValue() != "")
                        || (result[0].prop(it1).isNumber() &amp;&amp; result[0].prop(it1).numberValue() != 0)) {
                    markerString.append(it1)
                    markerString.append("; ")
                }
            }
            participantList.setMarkers(markerString.size() &gt; 0 ? markerString.toString().substring(0, markerString.toString().size() - 2) : "")
        }
        participantList.nameMatch = it.prop("Results").elements().size() &gt; 0 &amp;&amp; it.prop("Results").elements()[0].hasProp("D0") ? it.prop("Results").elements()[0].prop("D0").numberValue() : null
        participantList.isActive = it.hasProp("isActive") ? it.prop("isActive").boolValue() : null
        participantList.entityType = it.hasProp("entityType") ? it.prop("entityType").stringValue() : null
        participantListList.add(participantList)
    }

    execution.setVariable("participantListList", participantListList)
    execution.setVariable("emptyparticipantList", false)
}
else {
    println("Не удалось создать participantList")
    execution.setVariable("emptyparticipantList", true)
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:exclusiveGateway id="Gateway_1pj7qzr" default="Flow_1x1bi3r">
        <bpmn:incoming>Flow_09heimr</bpmn:incoming>
        <bpmn:outgoing>Flow_1x1bi3r</bpmn:outgoing>
        <bpmn:outgoing>Flow_084imaa</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_09heimr" sourceRef="Activity_03oe1vx" targetRef="Gateway_1pj7qzr" />
      <bpmn:sequenceFlow id="Flow_1x1bi3r" sourceRef="Gateway_1pj7qzr" targetRef="Activity_0gitwa8" />
      <bpmn:exclusiveGateway id="Gateway_05a1ttk">
        <bpmn:incoming>Flow_084imaa</bpmn:incoming>
        <bpmn:incoming>Flow_1fmq298</bpmn:incoming>
        <bpmn:outgoing>Flow_0e6x5bo</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_084imaa" sourceRef="Gateway_1pj7qzr" targetRef="Gateway_05a1ttk">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${emptyparticipantList}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:serviceTask id="Activity_0gitwa8" name="save delegate" camunda:delegateExpression="${saveObjectListDelegate}">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="outputVarName">participantListListOut</camunda:inputParameter>
            <camunda:inputParameter name="saveObjectList">${participantListList}</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1x1bi3r</bpmn:incoming>
        <bpmn:outgoing>Flow_02ce611</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_02ce611" sourceRef="Activity_0gitwa8" targetRef="Activity_0q96o71" />
      <bpmn:scriptTask id="Activity_0q96o71" name="PAYMENTNAMELIST" scriptFormat="groovy">
        <bpmn:incoming>Flow_02ce611</bpmn:incoming>
        <bpmn:outgoing>Flow_11yb4jq</bpmn:outgoing>
        <bpmn:script>import com.prime.db.rnkb.model.BaseDictionary
import com.prime.db.rnkb.model.PaymentParticipantList
import org.camunda.spin.json.SpinJsonNode

BaseDictionary getBd(int type, String code) {
    baseDictRepo.getByBaseDictionaryTypeCodeAndCode(type, code);
}

def json = execution.getVariable("jsonData") as SpinJsonNode
def participants = json.prop("RequestData").prop("PaymentEvents").elements()[0].prop("Participants")
List&lt;PaymentParticipantList&gt; participantListList = execution.getVariable("participantListList") as List&lt;PaymentParticipantList&gt;
List&lt;com.prime.db.rnkb.model.PaymentNameList&gt; paymentNameListList = new ArrayList&lt;&gt;()


participants.elements().each {it -&gt;


    if (it.hasProp("Result") &amp;&amp; it.prop("Result") != null &amp;&amp; it.prop("Results").elements().size() &gt; 0 &amp;&amp; it.prop("Results").elements()[0].hasProp("record") &amp;&amp; it.prop("Results").elements()[0].prop("record") != null) {
        def record = it.prop("Results").elements()[0].prop("record")
        if (record.hasProp("nameList") &amp;&amp; record.prop("nameList") != null &amp;&amp; record.prop("nameList").elements().size() &gt; 0) {
            record.prop("nameList").elements().each {name -&gt;
                com.prime.db.rnkb.model.PaymentNameList paymentNameList = new com.prime.db.rnkb.model.PaymentNameList()
                paymentNameList.paymentParticipantListId = participantListList.find {it1 -&gt; it1.exId == record.prop("record").prop("exId").stringValue()}
                name.hasProp("nameType") &amp;&amp; name.prop("nameType") != null ? paymentNameList.nameType = getBd(280, name.prop("nameType").stringValue()) : null
                paymentNameList.name = name.hasProp("name") ? name.prop("name").stringValue() : null
                paymentNameList.firstName = name.hasProp("firstName") ? name.prop("firstName").stringValue() : null
                paymentNameList.lastName = name.hasProp("lastName") ? name.prop("lastName").stringValue() : null
                paymentNameList.middleName = name.hasProp("middleName") ? name.prop("middleName").stringValue() : null
                paymentNameList.bestMatch = name.hasProp("name")  &amp;&amp; name.prop("name") != null &amp;&amp; it.prop("Result").hasProp("bestNatch") &amp;&amp; it.prop("Result").prop("bestNatch").hasProp("name") &amp;&amp; name.prop("name").stringValue() == it.prop("Result").prop("bestNatch").stringValue()
                paymentNameListList.add(paymentNameList)
            }

        }

    }


}

execution.setVariable("paymentNameListList", paymentNameListList)</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:endEvent id="Event_1pkn49o">
        <bpmn:incoming>Flow_0e6x5bo</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="Flow_0e6x5bo" sourceRef="Gateway_05a1ttk" targetRef="Event_1pkn49o" />
      <bpmn:sequenceFlow id="Flow_11yb4jq" sourceRef="Activity_0q96o71" targetRef="Activity_07k4x2t" />
      <bpmn:serviceTask id="Activity_07k4x2t" name="save delegate" camunda:delegateExpression="${saveObjectListDelegate}">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="saveObjectList">${paymentNameListList}</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_11yb4jq</bpmn:incoming>
        <bpmn:outgoing>Flow_12wpaq4</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_12wpaq4" sourceRef="Activity_07k4x2t" targetRef="Activity_0mmxcbx" />
      <bpmn:scriptTask id="Activity_0mmxcbx" name="PAYMENTADDRESSLIST" scriptFormat="groovy">
        <bpmn:incoming>Flow_12wpaq4</bpmn:incoming>
        <bpmn:outgoing>Flow_0uopr1s</bpmn:outgoing>
        <bpmn:script>import com.prime.db.rnkb.model.BaseDictionary
import com.prime.db.rnkb.model.PaymentParticipantList
import org.camunda.spin.json.SpinJsonNode

BaseDictionary getBd(int type, String code) {
    baseDictRepo.getByBaseDictionaryTypeCodeAndCode(type, code);
}

def json = execution.getVariable("jsonData") as SpinJsonNode
def participants = json.prop("RequestData").prop("PaymentEvents").elements()[0].prop("Participants")
List&lt;PaymentParticipantList&gt; participantListList = execution.getVariable("participantListList") as List&lt;PaymentParticipantList&gt;
List&lt;com.prime.db.rnkb.model.PaymentAddressList&gt; paymentAddressLists = new ArrayList&lt;&gt;()


participants.elements().each {it -&gt;


    if (it.hasProp("Result") &amp;&amp; it.prop("Result") != null &amp;&amp; it.prop("Results").elements().size() &gt; 0 &amp;&amp; it.prop("Results").elements()[0].hasProp("record") &amp;&amp; it.prop("Results").elements()[0].prop("record") != null) {
        def record = it.prop("Results").elements()[0].prop("record")
        if (record.hasProp("addressList") &amp;&amp; record.prop("addressList") != null &amp;&amp; record.prop("addressList").elements().size() &gt; 0) {
            record.prop("addressList").elements().each {name -&gt;
                com.prime.db.rnkb.model.PaymentAddressList paymentAddressList = new com.prime.db.rnkb.model.PaymentAddressList()
                paymentAddressList.paymentParticipantListId = participantListList.find {it1 -&gt; it1.exId == record.prop("record").prop("exId").stringValue()}
                name.hasProp("addressType") &amp;&amp; name.prop("addressType") != null ? paymentAddressList.addressType = getBd(281, name.prop("addressType").stringValue()) : null
                paymentAddressList.addressLine = name.hasProp("addressLine") ? name.prop("addressLine").stringValue() : null
                paymentAddressLists.add(paymentAddressList)
            }

        }

    }


}

execution.setVariable("paymentAddressLists", paymentAddressLists)</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0uopr1s" sourceRef="Activity_0mmxcbx" targetRef="Activity_0hfj9vx" />
      <bpmn:serviceTask id="Activity_0hfj9vx" name="Save delegate" camunda:delegateExpression="${saveObjectListDelegate}">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="saveObjectList">${paymentAddressLists}</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0uopr1s</bpmn:incoming>
        <bpmn:outgoing>Flow_0tm259a</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_0tm259a" sourceRef="Activity_0hfj9vx" targetRef="Activity_0080wiz" />
      <bpmn:scriptTask id="Activity_0080wiz" name="PAYMENTDATEDETAILS" scriptFormat="groovy">
        <bpmn:incoming>Flow_0tm259a</bpmn:incoming>
        <bpmn:outgoing>Flow_1m7mfna</bpmn:outgoing>
        <bpmn:script>import com.prime.db.rnkb.model.BaseDictionary
import com.prime.db.rnkb.model.PaymentDateDetails
import com.prime.db.rnkb.model.PaymentParticipantList
import org.camunda.spin.json.SpinJsonNode

BaseDictionary getBd(int type, String code) {
    baseDictRepo.getByBaseDictionaryTypeCodeAndCode(type, code);
}

def json = execution.getVariable("jsonData") as SpinJsonNode
def participants = json.prop("RequestData").prop("PaymentEvents").elements()[0].prop("Participants")
List&lt;PaymentParticipantList&gt; participantListList = execution.getVariable("participantListList") as List&lt;PaymentParticipantList&gt;
List&lt;PaymentDateDetails&gt; paymentDateDetailsList = new ArrayList&lt;&gt;()


participants.elements().each {it -&gt;


    if (it.hasProp("Result") &amp;&amp; it.prop("Result") != null &amp;&amp; it.prop("Results").elements().size() &gt; 0 &amp;&amp; it.prop("Results").elements()[0].hasProp("record") &amp;&amp; it.prop("Results").elements()[0].prop("record") != null) {
        def record = it.prop("Results").elements()[0].prop("record")
        if (record.hasProp("dateDetails") &amp;&amp; record.prop("dateDetails") != null &amp;&amp; record.prop("dateDetails").elements().size() &gt; 0) {
            record.prop("dateDetails").elements().each {name -&gt;
                PaymentDateDetails paymentDateDetails = new PaymentDateDetails()
                paymentDateDetails.paymentParticipantListId = participantListList.find {it1 -&gt; it1.exId == record.prop("record").prop("exId").stringValue()}
                name.hasProp("dateTypeId") &amp;&amp; name.prop("dateTypeId") != null ? paymentDateDetails.dateTypeId = getBd(282, name.prop("dateTypeId").stringValue()) : null
                paymentDateDetails.dateValue = name.hasProp("dateValue") ? name.prop("dateValue").stringValue() : null
                paymentDateDetails.day = name.hasProp("day") ? name.prop("day").toString() : null
                paymentDateDetails.month = name.hasProp("month") ? name.prop("month").toString() : null
                paymentDateDetails.year = name.hasProp("year") ? name.prop("year").toString() : null
                paymentDateDetailsList.add(paymentDateDetails)
            }

        }

    }


}

execution.setVariable("paymentDateDetailsList", paymentDateDetailsList)</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_1m7mfna" sourceRef="Activity_0080wiz" targetRef="Activity_0bi3h31" />
      <bpmn:serviceTask id="Activity_0bi3h31" name="save delegate" camunda:delegateExpression="${saveObjectListDelegate}">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="saveObjectList">${paymentDateDetailsList}</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1m7mfna</bpmn:incoming>
        <bpmn:outgoing>Flow_10gmals</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_10gmals" sourceRef="Activity_0bi3h31" targetRef="Activity_1muyc4q" />
      <bpmn:scriptTask id="Activity_1muyc4q" name="PAYMENTIDENTITYATRLIST" scriptFormat="groovy">
        <bpmn:incoming>Flow_10gmals</bpmn:incoming>
        <bpmn:outgoing>Flow_15l5kr6</bpmn:outgoing>
        <bpmn:script>import com.prime.db.rnkb.model.BaseDictionary
import com.prime.db.rnkb.model.PaymentDateDetails
import com.prime.db.rnkb.model.PaymentIdentityAdrList
import com.prime.db.rnkb.model.PaymentParticipantList
import org.camunda.spin.json.SpinJsonNode

BaseDictionary getBd(int type, String code) {
    baseDictRepo.getByBaseDictionaryTypeCodeAndCode(type, code);
}

def json = execution.getVariable("jsonData") as SpinJsonNode
def participants = json.prop("RequestData").prop("PaymentEvents").elements()[0].prop("Participants")
List&lt;PaymentParticipantList&gt; participantListList = execution.getVariable("participantListList") as List&lt;PaymentParticipantList&gt;
List&lt;PaymentIdentityAdrList&gt; paymentIdentityAdrLists = new ArrayList&lt;&gt;()


participants.elements().each {it -&gt;


    if (it.hasProp("Result") &amp;&amp; it.prop("Result") != null &amp;&amp; it.prop("Results").elements().size() &gt; 0 &amp;&amp; it.prop("Results").elements()[0].hasProp("record") &amp;&amp; it.prop("Results").elements()[0].prop("record") != null) {
        def record = it.prop("Results").elements()[0].prop("record")
        if (record.hasProp("identityAtrList") &amp;&amp; record.prop("identityAtrList") != null &amp;&amp; record.prop("identityAtrList").elements().size() &gt; 0) {
            record.prop("identityAtrList").elements().each {name -&gt;
                PaymentIdentityAdrList paymentIdentityAdrList = new PaymentIdentityAdrList()
                paymentIdentityAdrList.paymentParticipantListId = participantListList.find {it1 -&gt; it1.exId == record.prop("record").prop("exId").stringValue()}
                name.hasProp("idType") &amp;&amp; name.prop("idType") != null ? paymentIdentityAdrList.idType = getBd(283, name.prop("idType").stringValue()) : null
                paymentIdentityAdrList.idValue = name.hasProp("idValue") ? name.prop("idValue").stringValue() : null
                paymentIdentityAdrList.idSerial = name.hasProp("idSerial") ? name.prop("idSerial").stringValue() : null
                paymentIdentityAdrList.idNumber = name.hasProp("idNumber") ? name.prop("idNumber").stringValue() : null
                paymentIdentityAdrLists.add(paymentIdentityAdrList)
            }

        }

    }


}

execution.setVariable("paymentIdentityAdrLists", paymentIdentityAdrLists)</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_15l5kr6" sourceRef="Activity_1muyc4q" targetRef="Activity_1f3d2z1" />
      <bpmn:serviceTask id="Activity_1f3d2z1" name="save delegate" camunda:delegateExpression="${saveObjectListDelegate}">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="saveObjectList">${paymentIdentityAdrLists}</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_15l5kr6</bpmn:incoming>
        <bpmn:outgoing>Flow_08aseyn</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_08aseyn" sourceRef="Activity_1f3d2z1" targetRef="Activity_0370a3r" />
      <bpmn:scriptTask id="Activity_0370a3r" name="PAYMENTCOUNTRYLIST" scriptFormat="groovy">
        <bpmn:incoming>Flow_08aseyn</bpmn:incoming>
        <bpmn:outgoing>Flow_0yhee2r</bpmn:outgoing>
        <bpmn:script>import com.prime.db.rnkb.model.BaseDictionary
import com.prime.db.rnkb.model.PaymentCountryList
import com.prime.db.rnkb.model.PaymentDateDetails
import com.prime.db.rnkb.model.PaymentIdentityAdrList
import com.prime.db.rnkb.model.PaymentParticipantList
import org.camunda.spin.json.SpinJsonNode

BaseDictionary getBd(int type, String code) {
    baseDictRepo.getByBaseDictionaryTypeCodeAndCode(type, code);
}

def json = execution.getVariable("jsonData") as SpinJsonNode
def participants = json.prop("RequestData").prop("PaymentEvents").elements()[0].prop("Participants")
List&lt;PaymentParticipantList&gt; participantListList = execution.getVariable("participantListList") as List&lt;PaymentParticipantList&gt;
List&lt;PaymentCountryList&gt; paymentCountryLists = new ArrayList&lt;&gt;()


participants.elements().each { it -&gt;


    if (it.hasProp("Result") &amp;&amp; it.prop("Result") != null &amp;&amp; it.prop("Results").elements().size() &gt; 0 &amp;&amp; it.prop("Results").elements()[0].hasProp("record") &amp;&amp; it.prop("Results").elements()[0].prop("record") != null) {
        def record = it.prop("Results").elements()[0].prop("record")
        PaymentCountryList paymentCountryList = new PaymentCountryList()
        paymentCountryList.paymentParticipantListId = participantListList.find { it1 -&gt; it1.exId == record.prop("record").prop("exId").stringValue() }
        paymentCountryLists.add(paymentCountryList)


    }


}

execution.setVariable("paymentCountryLists", paymentCountryLists)</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0yhee2r" sourceRef="Activity_0370a3r" targetRef="Activity_0wche3j" />
      <bpmn:serviceTask id="Activity_0wche3j" name="save delegate" camunda:delegateExpression="${saveObjectListDelegate}">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="saveObjectList">${paymentCountryLists}</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0yhee2r</bpmn:incoming>
        <bpmn:outgoing>Flow_1u7pppf</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_1u7pppf" sourceRef="Activity_0wche3j" targetRef="Activity_05etxdh" />
      <bpmn:scriptTask id="Activity_05etxdh" name="PAYMENTVERSIONSLIST" scriptFormat="groovy">
        <bpmn:incoming>Flow_1u7pppf</bpmn:incoming>
        <bpmn:outgoing>Flow_0qvy8ax</bpmn:outgoing>
        <bpmn:script>import com.prime.db.rnkb.model.BaseDictionary
import com.prime.db.rnkb.model.PaymentParticipantList
import org.camunda.spin.json.SpinJsonNode

import java.time.LocalDateTime

BaseDictionary getBd(int type, String code) {
    baseDictRepo.getByBaseDictionaryTypeCodeAndCode(type, code);
}

def json = execution.getVariable("jsonData") as SpinJsonNode
def participants = json.prop("RequestData").prop("PaymentEvents").elements()[0].prop("Participants")
List&lt;PaymentParticipantList&gt; participantListList = execution.getVariable("participantListList") as List&lt;PaymentParticipantList&gt;
List&lt;com.prime.db.rnkb.model.PaymentVersionsList&gt; paymentVersionsLists = new ArrayList&lt;&gt;()


participants.elements().each {it -&gt;


    if (it.hasProp("Result") &amp;&amp; it.prop("Result") != null &amp;&amp; it.prop("Results").elements().size() &gt; 0 &amp;&amp; it.prop("Results").elements()[0].hasProp("record") &amp;&amp; it.prop("Results").elements()[0].prop("record") != null) {
        def record = it.prop("Results").elements()[0].prop("record")
        if (record.hasProp("versionsList") &amp;&amp; record.prop("versionsList") != null &amp;&amp; record.prop("versionsList").elements().size() &gt; 0) {
            record.prop("versionsList").elements().each {name -&gt;
                com.prime.db.rnkb.model.PaymentVersionsList paymentVersionsList = new com.prime.db.rnkb.model.PaymentVersionsList()
                paymentVersionsList.paymentParticipantListId = participantListList.find {it1 -&gt; it1.exId == record.prop("record").prop("exId").stringValue()}
                paymentVersionsList.listIdentifier = name.hasProp("listIdentifier") ? name.prop("listIdentifier").stringValue() : null
                paymentVersionsList.listVersion = name.hasProp("listVersion") ? name.prop("listVersion").stringValue() : null
                paymentVersionsList.versionDate =  name.hasProp("versionDate") ? LocalDateTime.parse(name.prop("versionDate").stringValue()) : null
                paymentVersionsList.loadDate =  name.hasProp("loadDate") ? LocalDateTime.parse(name.prop("loadDate").stringValue()) : null
                paymentVersionsList.updateDate =  name.hasProp("updateDate") ? LocalDateTime.parse(name.prop("updateDate").stringValue()) : null
                paymentVersionsList.isLastVersion = name.hasProp("isLastVersion") ? name.prop("isLastVersion").boolValue() : null
                paymentVersionsLists.add(paymentVersionsList)
            }

        }

    }


}

execution.setVariable("paymentVersionsLists", paymentVersionsLists)</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0qvy8ax" sourceRef="Activity_05etxdh" targetRef="Activity_0x1acmo" />
      <bpmn:serviceTask id="Activity_0x1acmo" name="save delegate" camunda:delegateExpression="${saveObjectListDelegate}">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="saveObjectList">${paymentVersionsLists}</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0qvy8ax</bpmn:incoming>
        <bpmn:outgoing>Flow_1fmq298</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_1fmq298" sourceRef="Activity_0x1acmo" targetRef="Gateway_05a1ttk" />
    </bpmn:subProcess>
    <bpmn:serviceTask id="Activity_0xhr3ji" name="Открыть транзакцию" camunda:delegateExpression="${startTransactionDelegate}">
      <bpmn:incoming>Flow_0kd34xp</bpmn:incoming>
      <bpmn:outgoing>Flow_1xwqo21</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1xwqo21" sourceRef="Activity_0xhr3ji" targetRef="Activity_046avyt" />
    <bpmn:sequenceFlow id="Flow_1mtxpn0" sourceRef="Activity_1et1nm9" targetRef="Activity_0gxxh7b" />
    <bpmn:serviceTask id="Activity_0gxxh7b" name="Открыть сессию" camunda:delegateExpression="${openSessionRnkbDelegate}">
      <bpmn:incoming>Flow_1mtxpn0</bpmn:incoming>
      <bpmn:outgoing>Flow_0kd34xp</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0kd34xp" sourceRef="Activity_0gxxh7b" targetRef="Activity_0xhr3ji" />
    <bpmn:endEvent id="Event_09uqy16">
      <bpmn:incoming>Flow_178dyym</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_14cpvbj" sourceRef="Activity_046avyt" targetRef="Activity_0qvrl0i" />
    <bpmn:serviceTask id="Activity_0qvrl0i" name="Закрыть транзакцию" camunda:delegateExpression="${endTransactionDelegate}">
      <bpmn:incoming>Flow_14cpvbj</bpmn:incoming>
      <bpmn:outgoing>Flow_178dyym</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_178dyym" sourceRef="Activity_0qvrl0i" targetRef="Event_09uqy16" />
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="amlKycOperationProcess">
      <bpmndi:BPMNEdge id="Flow_178dyym_di" bpmnElement="Flow_178dyym">
        <di:waypoint x="3890" y="310" />
        <di:waypoint x="3982" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_14cpvbj_di" bpmnElement="Flow_14cpvbj">
        <di:waypoint x="3640" y="310" />
        <di:waypoint x="3790" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0kd34xp_di" bpmnElement="Flow_0kd34xp">
        <di:waypoint x="700" y="310" />
        <di:waypoint x="740" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1mtxpn0_di" bpmnElement="Flow_1mtxpn0">
        <di:waypoint x="530" y="310" />
        <di:waypoint x="600" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1xwqo21_di" bpmnElement="Flow_1xwqo21">
        <di:waypoint x="840" y="310" />
        <di:waypoint x="990" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0aojsjg_di" bpmnElement="Flow_0aojsjg">
        <di:waypoint x="360" y="310" />
        <di:waypoint x="430" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1eta143_di" bpmnElement="Flow_1eta143">
        <di:waypoint x="188" y="310" />
        <di:waypoint x="260" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="292" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1jaqf7n_di" bpmnElement="Activity_13r4h67">
        <dc:Bounds x="260" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1ltawxt_di" bpmnElement="Activity_1et1nm9">
        <dc:Bounds x="430" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_046avyt_di" bpmnElement="Activity_046avyt" isExpanded="true">
        <dc:Bounds x="990" y="80" width="2650" height="460" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_1fmq298_di" bpmnElement="Flow_1fmq298">
        <di:waypoint x="3400" y="310" />
        <di:waypoint x="3435" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0qvy8ax_di" bpmnElement="Flow_0qvy8ax">
        <di:waypoint x="3240" y="310" />
        <di:waypoint x="3300" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1u7pppf_di" bpmnElement="Flow_1u7pppf">
        <di:waypoint x="3080" y="310" />
        <di:waypoint x="3140" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0yhee2r_di" bpmnElement="Flow_0yhee2r">
        <di:waypoint x="2920" y="310" />
        <di:waypoint x="2980" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_08aseyn_di" bpmnElement="Flow_08aseyn">
        <di:waypoint x="2760" y="310" />
        <di:waypoint x="2820" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_15l5kr6_di" bpmnElement="Flow_15l5kr6">
        <di:waypoint x="2600" y="310" />
        <di:waypoint x="2660" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_10gmals_di" bpmnElement="Flow_10gmals">
        <di:waypoint x="2440" y="310" />
        <di:waypoint x="2500" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1m7mfna_di" bpmnElement="Flow_1m7mfna">
        <di:waypoint x="2280" y="310" />
        <di:waypoint x="2340" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tm259a_di" bpmnElement="Flow_0tm259a">
        <di:waypoint x="2120" y="310" />
        <di:waypoint x="2180" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0uopr1s_di" bpmnElement="Flow_0uopr1s">
        <di:waypoint x="1960" y="310" />
        <di:waypoint x="2020" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_12wpaq4_di" bpmnElement="Flow_12wpaq4">
        <di:waypoint x="1800" y="310" />
        <di:waypoint x="1860" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_11yb4jq_di" bpmnElement="Flow_11yb4jq">
        <di:waypoint x="1640" y="310" />
        <di:waypoint x="1700" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0e6x5bo_di" bpmnElement="Flow_0e6x5bo">
        <di:waypoint x="3485" y="310" />
        <di:waypoint x="3552" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_02ce611_di" bpmnElement="Flow_02ce611">
        <di:waypoint x="1480" y="310" />
        <di:waypoint x="1540" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_084imaa_di" bpmnElement="Flow_084imaa">
        <di:waypoint x="1300" y="335" />
        <di:waypoint x="1300" y="470" />
        <di:waypoint x="3460" y="470" />
        <di:waypoint x="3460" y="335" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1x1bi3r_di" bpmnElement="Flow_1x1bi3r">
        <di:waypoint x="1325" y="310" />
        <di:waypoint x="1380" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_09heimr_di" bpmnElement="Flow_09heimr">
        <di:waypoint x="1220" y="310" />
        <di:waypoint x="1275" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1ve5udi_di" bpmnElement="Flow_1ve5udi">
        <di:waypoint x="1066" y="310" />
        <di:waypoint x="1120" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Event_1q8k7ji_di" bpmnElement="Event_1q8k7ji">
        <dc:Bounds x="1030" y="292" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0s0og2b_di" bpmnElement="Activity_03oe1vx">
        <dc:Bounds x="1120" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1pj7qzr_di" bpmnElement="Gateway_1pj7qzr" isMarkerVisible="true">
        <dc:Bounds x="1275" y="285" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_05a1ttk_di" bpmnElement="Gateway_05a1ttk" isMarkerVisible="true">
        <dc:Bounds x="3435" y="285" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1q8qaw5_di" bpmnElement="Activity_0gitwa8">
        <dc:Bounds x="1380" y="270" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0n916ei_di" bpmnElement="Activity_0q96o71">
        <dc:Bounds x="1540" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1pkn49o_di" bpmnElement="Event_1pkn49o">
        <dc:Bounds x="3552" y="292" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1hc3jzv_di" bpmnElement="Activity_07k4x2t">
        <dc:Bounds x="1700" y="270" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0qkksf1_di" bpmnElement="Activity_0mmxcbx">
        <dc:Bounds x="1860" y="270" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1n0dq9k_di" bpmnElement="Activity_0hfj9vx">
        <dc:Bounds x="2020" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_06pcivp_di" bpmnElement="Activity_0080wiz">
        <dc:Bounds x="2180" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1rxfjsv_di" bpmnElement="Activity_0bi3h31">
        <dc:Bounds x="2340" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1ektmpf_di" bpmnElement="Activity_1muyc4q">
        <dc:Bounds x="2500" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_05545t1_di" bpmnElement="Activity_1f3d2z1">
        <dc:Bounds x="2660" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0kowcf2_di" bpmnElement="Activity_0370a3r">
        <dc:Bounds x="2820" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0bqmlrw_di" bpmnElement="Activity_0wche3j">
        <dc:Bounds x="2980" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1hwpvbq_di" bpmnElement="Activity_05etxdh">
        <dc:Bounds x="3140" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0uieia8_di" bpmnElement="Activity_0x1acmo">
        <dc:Bounds x="3300" y="270" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1judvsr_di" bpmnElement="Activity_0xhr3ji">
        <dc:Bounds x="740" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0rcn6vc_di" bpmnElement="Activity_0gxxh7b">
        <dc:Bounds x="600" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_09uqy16_di" bpmnElement="Event_09uqy16">
        <dc:Bounds x="3982" y="292" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0awbn9b_di" bpmnElement="Activity_0qvrl0i">
        <dc:Bounds x="3790" y="270" width="100" height="80" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
